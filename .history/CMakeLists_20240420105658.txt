# 设置构建项目适用通用的操作系统
set(CMAKE_SYSTEM_NAME Generic)

# 设置构建项目的版本号
set(CMAKE_SYSTEM_VERSION 1)

# 设置构建项目所支持的最低CMake版本
cmake_minimum_required(VERSION 3.13)
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
    set(CMAKE_CUDA_COMPILER_LAUNCHER "${CCACHE_PROGRAM}") # CMake 3.9+
endif()
set(CMAKE_C_COMPILER arm-none-eabi-gcc)
set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
set(CMAKE_ASM_COMPILER  arm-none-eabi-gcc)
set(CMAKE_AR arm-none-eabi-ar)

# 设置CMake的二进制文件复制工具和反汇编工具
set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
set(CMAKE_OBJDUMP arm-none-eabi-objdump)

# 设置CMake的大小统计工具
set(SIZE arm-none-eabi-size)

# 设置编译的目标类型为静态库
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

# 设置项目名称和支持的语言
project(Example C CXX ASM)

# 设置CMake使用的C++语言标准和C语言标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 11)

# 指定了目标处理器为 ARM Cortex-M3
# 启用了 Thumb 指令集和 Thumb 与 ARM 指令集之间的互操作
add_compile_options(-mcpu=cortex-m3 -mthumb -mthumb-interwork)  # NOLINT

# -ffunction-sections 和 -fdata-sections 将函数和数据分别放入它们自己的节（section）
# -fno-common 防止生成公共符号
# -fmessage-length=0 禁用错误信息的行数限制
add_compile_options(-ffunction-sections -fdata-sections -fno-common -fmessage-length=0)

# 设置优化的级别
add_compile_options(-Ofast)

# 设置头文件搜索路径
include_directories(Core/Inc Drivers/Inc)

# 预定义宏
add_definitions(-DDEBUG -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER )

# 获取项目的所有源文件
file(GLOB_RECURSE SOURCES "Core/*.*" "Drivers/*.*")

# 设置变量值,即链接脚本路径
# set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32F103C8Tx_FLASH.ld)
set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32F103C6TX_FLASH.ld)

# add_compile_definitions(ARM_MATH_CM4;ARM_MATH_MATRIX_CHECK;ARM_MATH_ROUNDING)
# add_compile_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)
# add_link_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)
add_compile_options(-mfloat-abi=soft)
# -Wl 用来传递选项给链接器的。
# -gc-sections 告诉链接器丢弃未使用的代码和数据段，帮助减小生成的二进制文件的大小。
# --print-memory-usage 让链接器在链接完成后打印内存使用情况，这可以帮助我们了解程序使用了多少 RAM 和 Flash。
# -Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map 让链接器生成一个 map 文件,包含了生成的二进制文件的详细信息
add_link_options(-Wl,-gc-sections,--print-memory-usage,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map)

# 如上编译选项,为链接器设置目标处理器以及指令集
add_link_options(-mcpu=cortex-m3 -mthumb -mthumb-interwork) # NOLINT

# 为链接器设置链接脚本
add_link_options(-T ${LINKER_SCRIPT})

# 构建可执行文件,分别为可执行文件名称、所需的源文件、链接脚本
add_executable(${PROJECT_NAME}.elf ${SOURCES} ${LINKER_SCRIPT})

# 设置二进制文件的输出路径
set(HEX_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex)
# set(BIN_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin)
if(GCC_VERSION VERSION_GREATER 12.2 OR GCC_VERSION VERSION_EQUAL 12.2)
    add_link_options(-Wl,--no-warn-rwx-segments)
endif()
# 生成二进制文件
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
        COMMAND ${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}
        # COMMAND ${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}
        COMMENT "Building ${HEX_FILE}")
